import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.4719a631.js";const u=JSON.parse('{"title":"Custom Indicators","description":"","frontmatter":{"title":"Custom Indicators"},"headers":[],"relativePath":"docs/indicators/custom-indicators.md","filePath":"docs/indicators/custom-indicators.md"}'),o={name:"docs/indicators/custom-indicators.md"},p=l(`<h1 id="advanced-adding-a-custom-indicator" tabindex="-1">Advanced - Adding a custom indicator <a class="header-anchor" href="#advanced-adding-a-custom-indicator" aria-label="Permalink to &quot;Advanced - Adding a custom indicator&quot;">​</a></h1><p>Does your strategy idea need indicators that aren&#39;t available yet? Let&#39;s see how to create and use custom indicators in Jesse.</p><h2 id="tutorial-for-a-custom-indicator" tabindex="-1">Tutorial for a custom indicator <a class="header-anchor" href="#tutorial-for-a-custom-indicator" aria-label="Permalink to &quot;Tutorial for a custom indicator&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Don&#39;t reinvent the wheel</p><p>Before starting to code from scratch you might want to try finding existing implementations. Maybe you can use them right away or at least as a basis for your code: The Github search can be a good place for that. Search the name of your indicator (sometimes it helps to combine it with keywords like high, low, open, close or price). Click on &quot;All Github&quot;. Then set the type to &quot;Code&quot; and language to &quot;Python&quot; or &quot;Jupyter Notebook&quot;.</p></div><p>In this tutorial, we will convert <a href="https://id.tradingview.com/script/Q29rCz5S-Elliott-Wave-Oscillator/" target="_blank" rel="noreferrer">Elliott Wave Oscillator by Centrokom</a> that is originally written in Pine Script to a custom indicator usable in Jesse. The following is the original code from Tradingview:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//@version=3</span></span>
<span class="line"><span style="color:#B392F0;">study</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Elliott Wave Oscillator&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">s2</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">ema</span><span style="color:#E1E4E8;">(close, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ema</span><span style="color:#E1E4E8;">(close, </span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">c_color</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">s2 </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> red </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> lime</span></span>
<span class="line"><span style="color:#B392F0;">plot</span><span style="color:#E1E4E8;">(s2, color</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">c_color, style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">histogram, linewidth</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//@version=3</span></span>
<span class="line"><span style="color:#6F42C1;">study</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Elliott Wave Oscillator&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">s2</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">ema</span><span style="color:#24292E;">(close, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ema</span><span style="color:#24292E;">(close, </span><span style="color:#005CC5;">34</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">c_color</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">s2 </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> red </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> lime</span></span>
<span class="line"><span style="color:#6F42C1;">plot</span><span style="color:#24292E;">(s2, color</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">c_color, style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">histogram, linewidth</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Now, let&#39;s start the creation of our first custom indicator:</p><ol><li>Create a new folder called <code>custom_indicators</code> and it&#39;s <code>__init__.py</code> file in the project&#39;s <code>ROOT</code> folder.</li><li>Then create a new file for the actual indicator, in this case, we name it: <code>ewo.py</code> for our Elliott Wave Oscillator.</li><li>The folder structure should look like this:</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">storage</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># folder containing logs, chart images, etc</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">strategies</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># folder where you define your strategies</span></span>
<span class="line"><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">custom_indicators</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># folder for Jesse&#39;s custom indicator</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ewo.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">storage</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># folder containing logs, chart images, etc</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">strategies</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># folder where you define your strategies</span></span>
<span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">custom_indicators</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># folder for Jesse&#39;s custom indicator</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ewo.py</span></span></code></pre></div><ol start="4"><li>Import the custom indicator file in <code>custom_indicators/__init__.py</code>.</li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> .ewo </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ewo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> .ewo </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ewo</span></span></code></pre></div><ol start="5"><li>Now we can start creating the actual indicator code in <code>ewo.py</code>.</li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> numpy </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> np</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> talib</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> typing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Union</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> jesse.helpers </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> get_candle_source, slice_candles</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ewo</span><span style="color:#E1E4E8;">(candles: np.ndarray, short_period: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, long_period: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;">, source_type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">, sequential </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">) -&gt; Union[</span><span style="color:#79B8FF;">float</span><span style="color:#E1E4E8;">, np.ndarray]:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    Elliott Wave Oscillator</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param candles: np.ndarray</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param short_period: int - default: 5</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param long_period: int - default: 34</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param source_type: str - default: close</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param sequential: bool - default: False</span></span>
<span class="line"><span style="color:#9ECBFF;">    :return: Union[float, np.ndarray]</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    candles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slice_candles(candles, sequential)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_candle_source(candles, source_type)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ewo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> np.subtract(talib.EMA(src, </span><span style="color:#FFAB70;">timeperiod</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">short_period), talib.EMA(src, </span><span style="color:#FFAB70;">timeperiod</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">long_period))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> sequential:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ewo</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ewo[</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> talib</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> typing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Union</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> jesse.helpers </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> get_candle_source, slice_candles</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ewo</span><span style="color:#24292E;">(candles: np.ndarray, short_period: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, long_period: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">34</span><span style="color:#24292E;">, source_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">, sequential </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">) -&gt; Union[</span><span style="color:#005CC5;">float</span><span style="color:#24292E;">, np.ndarray]:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    Elliott Wave Oscillator</span></span>
<span class="line"><span style="color:#032F62;">    :param candles: np.ndarray</span></span>
<span class="line"><span style="color:#032F62;">    :param short_period: int - default: 5</span></span>
<span class="line"><span style="color:#032F62;">    :param long_period: int - default: 34</span></span>
<span class="line"><span style="color:#032F62;">    :param source_type: str - default: close</span></span>
<span class="line"><span style="color:#032F62;">    :param sequential: bool - default: False</span></span>
<span class="line"><span style="color:#032F62;">    :return: Union[float, np.ndarray]</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    candles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slice_candles(candles, sequential)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_candle_source(candles, source_type)</span></span>
<span class="line"><span style="color:#24292E;">    ewo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.subtract(talib.EMA(src, </span><span style="color:#E36209;">timeperiod</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">short_period), talib.EMA(src, </span><span style="color:#E36209;">timeperiod</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">long_period))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> sequential:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ewo</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ewo[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span></code></pre></div><ol start="6"><li>Finally, to use the indicator in a trading strategy, we add the custom_indicators as a library.</li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> jesse.strategies </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Strategy</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> custom_indicators </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> cta</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Strategy01</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Strategy</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@</span><span style="color:#79B8FF;">property</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ewo</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cta.ewo(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.candles, </span><span style="color:#FFAB70;">short_period</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">long_period</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">source_type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sequential</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> jesse.strategies </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Strategy</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> custom_indicators </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> cta</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Strategy01</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Strategy</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">property</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ewo</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cta.ewo(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.candles, </span><span style="color:#E36209;">short_period</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#E36209;">long_period</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">34</span><span style="color:#24292E;">, </span><span style="color:#E36209;">source_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sequential</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="hints" tabindex="-1">Hints <a class="header-anchor" href="#hints" aria-label="Permalink to &quot;Hints&quot;">​</a></h2><h3 id="slicing-the-candles" tabindex="-1">Slicing the candles <a class="header-anchor" href="#slicing-the-candles" aria-label="Permalink to &quot;Slicing the candles&quot;">​</a></h3><p>For performance gains, it&#39;s good to slice the candles to a certain size to avoid unnecessary calculations. That&#39;s the reason we use slice_candles(). We use the configured warmup_candles_num.</p><p>We don&#39;t do it by default if sequential=True, as Jesse doesn&#39;t know how much lookback you need from your sequential indicator. But as you know it, you can remove this condition.</p><div class="tip custom-block"><p class="custom-block-title">Too few past data change indicator values</p><p>Some indicators are influenced by the whole range of past data. These functions are called functions with memory. Check <a href="https://ta-lib.org/d_api/ta_setunstableperiod.html" target="_blank" rel="noreferrer">here</a> for a good explanation. That&#39;s the reason for warm_up_candles_num changing indicator values under some conditions or variations to other implementations (like TradingView).</p></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">slice_candles</span><span style="color:#E1E4E8;">(candles: np.ndarray, sequential: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;">) -&gt; np.ndarray:</span></span>
<span class="line"><span style="color:#E1E4E8;">    warmup_candles_num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_config(</span><span style="color:#9ECBFF;">&#39;env.data.warmup_candles_num&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">240</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> sequential </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(candles) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> warmup_candles_num:</span></span>
<span class="line"><span style="color:#E1E4E8;">        candles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> candles[</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">warmup_candles_num:]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> candles</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">slice_candles</span><span style="color:#24292E;">(candles: np.ndarray, sequential: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;">) -&gt; np.ndarray:</span></span>
<span class="line"><span style="color:#24292E;">    warmup_candles_num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_config(</span><span style="color:#032F62;">&#39;env.data.warmup_candles_num&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">240</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> sequential </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(candles) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> warmup_candles_num:</span></span>
<span class="line"><span style="color:#24292E;">        candles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> candles[</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">warmup_candles_num:]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> candles</span></span></code></pre></div><h3 id="accessing-open-close-high-low-and-volume" tabindex="-1">Accessing open, close, high, low, and volume <a class="header-anchor" href="#accessing-open-close-high-low-and-volume" aria-label="Permalink to &quot;Accessing open, close, high, low, and volume&quot;">​</a></h3><p>In the tutorial above we used the helper function. <code>src = get_candle_source(candles, source_type)</code>. This function accepts as parameters:</p><ul><li><code>&quot;close&quot;</code></li><li><code>&quot;high&quot;</code></li><li><code>&quot;low&quot;</code></li><li><code>&quot;open&quot;</code></li><li><code>&quot;volume&quot;</code></li><li><code>&quot;hl2&quot;</code></li><li><code>&quot;hlc3&quot;</code></li><li><code>&quot;ohlc4&quot;</code></li></ul><p>and returns the corresponding candle data. That is useful in many cases, but you can get and calculate that data directly inside the indicator yourself.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">candles_open </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">candles_close </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">candles_high </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">candles_low </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">candles_volume </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">candles_hl2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (candles[:, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">candles_hlc3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (candles[:, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">candles_ohlc4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (candles[:, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">candles_open </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">candles_close </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">candles_high </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">candles_low </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">candles_volume </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">candles_hl2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (candles[:, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">candles_hlc3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (candles[:, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">candles_ohlc4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (candles[:, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span></code></pre></div><h3 id="the-thing-with-nan-and-zero" tabindex="-1">The thing with NaN and zero <a class="header-anchor" href="#the-thing-with-nan-and-zero" aria-label="Permalink to &quot;The thing with NaN and zero&quot;">​</a></h3><p>You should set indicator values, that can&#39;t be calculated to <code>np.nan</code>!</p><p>About NaN values:</p><ul><li>NaN is short for “Not a Number”.</li><li>NaN values represent undefined or unrepresentable results from certain mathematical operations.</li><li>Mathematical operations involving a NaN will either return a NaN or raise an exception.</li><li>Comparisons involving a NaN will return False.</li></ul><p>What&#39;s the reason for that? Depending on your calculation you might need N candles from the past. Because of that, you won&#39;t be able to calculate a value for the indicator at the beginning of your candle data for exactly these N candles. To avoid future problems in your strategy or calculations these should be set to <code>np.nan</code> and not zero. Imagine a strategy where you enter in this condition <code>self.indicator_value &lt; self.price</code>. If you had used zero instead of NaN and the current indicator value couldn&#39;t be calculated because of missing candles from the past or another problem in your calculation, the condition would be True, even if the real indicator value would be greater or the same as the price. If you had used NaN it would return False as explained above and you are safe.</p><h3 id="the-thing-with-length" tabindex="-1">The thing with length <a class="header-anchor" href="#the-thing-with-length" aria-label="Permalink to &quot;The thing with length&quot;">​</a></h3><p>Numpy makes calculations with arrays easy. For example, you can easily create hl2 prices like that:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">candles_hl2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (candles[:, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">candles_hl2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (candles[:, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span></code></pre></div><p>That works because <code>candles[:, 3]</code> and <code>candles[:, 4]</code> have the same shape/length. That&#39;s the reason why it&#39;s important to always keep the length consistent. <a href="https://docs.jesse.trade/docs/indicators/custom-indicators.html#make-arrays-the-same-length" target="_blank" rel="noreferrer">Use this to match lengths</a> and read this to understand why it&#39;s important to use NaN for missing values: <a href="#the-thing-with-nan-and-zero">The thing with NaN and zero</a>.</p><h3 id="numba" tabindex="-1">Numba <a class="header-anchor" href="#numba" aria-label="Permalink to &quot;Numba&quot;">​</a></h3><p>Jesse uses <a href="https://numba.pydata.org/" target="_blank" rel="noreferrer">Numba</a> to speed up indicator calculations. Numba works well on loops and a lot of numpy functions. Check the Numba docs. <a href="https://github.com/jesse-ai/jesse/blob/21b4438a817f4c2ffcab6b95a8518832e49abb89/jesse/indicators/high_pass.py" target="_blank" rel="noreferrer">Here</a> you will find a usage example from Jesse&#39;s indicators.</p><h3 id="external-libraries-for-technical-indicators-and-things-to-be-aware-of" tabindex="-1">External libraries for technical indicators and things to be aware of <a class="header-anchor" href="#external-libraries-for-technical-indicators-and-things-to-be-aware-of" aria-label="Permalink to &quot;External libraries for technical indicators and things to be aware of&quot;">​</a></h3><p>There are mainly two kinds of python libraries for technical indicators: Some are Pandas based and some are Numpy based. For performance reasons Jesse uses Numpy.</p><h4 id="talib" tabindex="-1">Talib <a class="header-anchor" href="#talib" aria-label="Permalink to &quot;Talib&quot;">​</a></h4><p>Talib is a perfect match for Jesse as it uses Numpy.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> talib</span></span>
<span class="line"><span style="color:#E1E4E8;">ema </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> talib.EMA(candles[:, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">timeperiod</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">period)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> talib</span></span>
<span class="line"><span style="color:#24292E;">ema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> talib.EMA(candles[:, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], </span><span style="color:#E36209;">timeperiod</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">period)</span></span></code></pre></div><h4 id="tulipy" tabindex="-1">Tulipy <a class="header-anchor" href="#tulipy" aria-label="Permalink to &quot;Tulipy&quot;">​</a></h4><p>Tulipy returns Numpy, but has two things you need to be aware of.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> tulipy</span></span>
<span class="line"><span style="color:#E1E4E8;">zlema </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tulipy.zlema(np.ascontiguousarray(candles[:, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]), </span><span style="color:#FFAB70;">period</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">period)</span></span>
<span class="line"><span style="color:#E1E4E8;">zlema_with_nan </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> np.concatenate((np.full((candles.shape[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> zlema.shape[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]), np.nan), zlema)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> tulipy</span></span>
<span class="line"><span style="color:#24292E;">zlema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tulipy.zlema(np.ascontiguousarray(candles[:, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]), </span><span style="color:#E36209;">period</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">period)</span></span>
<span class="line"><span style="color:#24292E;">zlema_with_nan </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.concatenate((np.full((candles.shape[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> zlema.shape[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]), np.nan), zlema)</span></span></code></pre></div><ul><li>Tulipy accepts only contiguous arrays. The conversion can be done with: <code>np.ascontiguousarray(candles[:, 2])</code></li><li>The returned length of the array varies. That&#39;s connected to the problem explained in <a href="#the-thing-with-nan-and-zero">The thing with NaN and zero</a>. Tulipy just strips the values it couldn&#39;t calculate. To stay consistent with the length of our arrays we need to add those NaN ourself: <code>np.concatenate((np.full((candles.shape[0] - zlema.shape[0]), np.nan), zlema), axis=0)</code>. This compares the lengths and adds the difference as NaN to the beginning of the indicator array.</li></ul><h4 id="libraries-using-pandas" tabindex="-1">Libraries using Pandas <a class="header-anchor" href="#libraries-using-pandas" aria-label="Permalink to &quot;Libraries using Pandas&quot;">​</a></h4><p>There are libraries out there using pandas. To use them you need to convert Numpy to Pandas. You can use <a href="https://docs.jesse.trade/docs/utils.html#numpy-candles-to-dataframe" target="_blank" rel="noreferrer">this helper function</a> for the conversion. The result of the indicator needs to be then converted back to numpy. Probably that will do it: <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.to_numpy.html#pandas-series-to-numpy" target="_blank" rel="noreferrer">pandas.Series.to_numpy</a>. All that converting will cost you performance and Pandas itself is less performant than Numpy.</p><h3 id="loops" tabindex="-1">Loops <a class="header-anchor" href="#loops" aria-label="Permalink to &quot;Loops&quot;">​</a></h3><p>Try to avoid loops whenever possible. Numpy and Scipy have a lot of functions that can replace the stuff that you might want to do in a loop. Loops will make the backtest very slow. The worst would be a loop within a loop. Do some research on ways to avoid them. Jesse&#39;s Discord or Stackoverflow might be a good place.</p><h4 id="how-to-do-a-loop-if-you-couldn-t-avoid-it" tabindex="-1">How to do a loop if you couldn&#39;t avoid it: <a class="header-anchor" href="#how-to-do-a-loop-if-you-couldn-t-avoid-it" aria-label="Permalink to &quot;How to do a loop if you couldn&#39;t avoid it:&quot;">​</a></h4><p>For this example, we calculate the difference between the closing price to the closing price 10 candles ago. First, we create an empty array with NaNs. (For this reason check out: <a href="#the-thing-with-nan-and-zero">The thing with NaN and zero</a>) Then we do the loop starting with i = 10, as we need 10 past candles for this calculation to work until we reach the maximal available candle length.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    close </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> candles[:, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    my_indicator_from_loop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> np.full_like(close, np.nan)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(close)):</span></span>
<span class="line"><span style="color:#E1E4E8;">        my_indicator_from_loop[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> close[i] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> close[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    close </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> candles[:, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    my_indicator_from_loop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.full_like(close, np.nan)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(close)):</span></span>
<span class="line"><span style="color:#24292E;">        my_indicator_from_loop[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> close[i] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> close[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">]</span></span></code></pre></div><p>Consider using <a href="#numba">Numba</a> to speed it up.</p><h3 id="usefull-numpy-stuff" tabindex="-1">Usefull Numpy stuff <a class="header-anchor" href="#usefull-numpy-stuff" aria-label="Permalink to &quot;Usefull Numpy stuff&quot;">​</a></h3><p>Here we collect functions and links, that are often useful in indicator code.</p><h4 id="numpy-s-shift" tabindex="-1">Numpy&#39;s Shift <a class="header-anchor" href="#numpy-s-shift" aria-label="Permalink to &quot;Numpy&#39;s Shift&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">np_shift</span><span style="color:#E1E4E8;">(arr: np.ndarray, num: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, fill_value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">np.nan) -&gt; np.ndarray:</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> np.empty_like(arr)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        result[:num] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fill_value</span></span>
<span class="line"><span style="color:#E1E4E8;">        result[num:] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr[:</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">num]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        result[num:] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fill_value</span></span>
<span class="line"><span style="color:#E1E4E8;">        result[:num] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr[</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">num:]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        result[:] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">np_shift</span><span style="color:#24292E;">(arr: np.ndarray, num: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, fill_value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">np.nan) -&gt; np.ndarray:</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.empty_like(arr)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        result[:num] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fill_value</span></span>
<span class="line"><span style="color:#24292E;">        result[num:] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[:</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">num]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        result[num:] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fill_value</span></span>
<span class="line"><span style="color:#24292E;">        result[:num] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">num:]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        result[:] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span></code></pre></div><p><a href="https://stackoverflow.com/a/42642326/6437437" target="_blank" rel="noreferrer">Source</a></p><h4 id="numpy-s-forward-fill" tabindex="-1">Numpy&#39;s Forward Fill <a class="header-anchor" href="#numpy-s-forward-fill" aria-label="Permalink to &quot;Numpy&#39;s Forward Fill&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">np_ffill</span><span style="color:#E1E4E8;">(arr: np.ndarray, axis: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) -&gt; np.ndarray:</span></span>
<span class="line"><span style="color:#E1E4E8;">    idx_shape </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">)] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> [np.newaxis] </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(arr.shape) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> axis </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    idx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> np.where(</span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">np.isnan(arr), np.arange(arr.shape[axis])[idx_shape], </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    np.maximum.accumulate(idx, </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">axis, </span><span style="color:#FFAB70;">out</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">idx)</span></span>
<span class="line"><span style="color:#E1E4E8;">    slc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [np.arange(k)[</span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> dim </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> np.newaxis</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> dim </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(arr.shape))])]</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(arr.shape)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    slc[axis] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> idx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr[</span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;">(slc)]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">np_ffill</span><span style="color:#24292E;">(arr: np.ndarray, axis: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) -&gt; np.ndarray:</span></span>
<span class="line"><span style="color:#24292E;">    idx_shape </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">)] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> [np.newaxis] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(arr.shape) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> axis </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    idx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.where(</span><span style="color:#D73A49;">~</span><span style="color:#24292E;">np.isnan(arr), np.arange(arr.shape[axis])[idx_shape], </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    np.maximum.accumulate(idx, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">axis, </span><span style="color:#E36209;">out</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">idx)</span></span>
<span class="line"><span style="color:#24292E;">    slc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [np.arange(k)[</span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> dim </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> np.newaxis</span></span>
<span class="line"><span style="color:#24292E;">                               </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> dim </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(arr.shape))])]</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(arr.shape)]</span></span>
<span class="line"><span style="color:#24292E;">    slc[axis] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> idx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr[</span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;">(slc)]</span></span></code></pre></div><h4 id="numpy-s-sliding-window" tabindex="-1">Numpy&#39;s Sliding Window <a class="header-anchor" href="#numpy-s-sliding-window" aria-label="Permalink to &quot;Numpy&#39;s Sliding Window&quot;">​</a></h4><p>The <a href="https://numpy.org/devdocs/reference/generated/numpy.lib.stride_tricks.sliding_window_view.html" target="_blank" rel="noreferrer">sliding_window_view</a> is a very usefull new function of numpy for indicator calculation.</p><p><a href="https://github.com/jesse-ai/jesse/blob/21b4438a817f4c2ffcab6b95a8518832e49abb89/jesse/indicators/fwma.py" target="_blank" rel="noreferrer">Here</a> you will find a usage example from Jesse&#39;s indicators.</p><h4 id="make-arrays-the-same-length" tabindex="-1">Make arrays the same length <a class="header-anchor" href="#make-arrays-the-same-length" aria-label="Permalink to &quot;Make arrays the same length&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">array_with_matching_lenght </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> np.concatenate((np.full((candles.shape[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> array_with_shorter_lenght.shape[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]), np.nan), array_with_shorter_lenght)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">array_with_matching_lenght </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.concatenate((np.full((candles.shape[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> array_with_shorter_lenght.shape[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]), np.nan), array_with_shorter_lenght)</span></span></code></pre></div><p>or</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> jesse.helpers </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> same_length</span></span>
<span class="line"><span style="color:#E1E4E8;">array_with_matching_lenght </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> same_length(candles, array_with_shorter_lenght)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> jesse.helpers </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> same_length</span></span>
<span class="line"><span style="color:#24292E;">array_with_matching_lenght </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> same_length(candles, array_with_shorter_lenght)</span></span></code></pre></div><h4 id="use-numpy-s-vectorized-operations" tabindex="-1">Use Numpy&#39;s Vectorized Operations <a class="header-anchor" href="#use-numpy-s-vectorized-operations" aria-label="Permalink to &quot;Use Numpy&#39;s Vectorized Operations&quot;">​</a></h4><p>Whenever possible you want to use <a href="https://www.pythonlikeyoumeanit.com/Module3_IntroducingNumpy/VectorizedOperations.html" target="_blank" rel="noreferrer">VectorizedOperations</a>, as they are faster.</p>`,70),e=[p];function t(r,c,i,y,E,d){return a(),n("div",null,e)}const F=s(o,[["render",t]]);export{u as __pageData,F as default};
