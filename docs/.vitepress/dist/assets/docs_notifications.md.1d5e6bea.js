import{_ as e,o,c as t,Q as a}from"./chunks/framework.4719a631.js";const m=JSON.parse('{"title":"Notifications","description":"","frontmatter":{},"headers":[],"relativePath":"docs/notifications.md","filePath":"docs/notifications.md"}'),i={name:"docs/notifications.md"},n=a('<h1 id="notifications" tabindex="-1">Notifications <a class="header-anchor" href="#notifications" aria-label="Permalink to &quot;Notifications&quot;">​</a></h1><p>Jesse provides support for sending notifications to delivery channels. At the moment, Telegram, Discord, and Slack drivers are ready and shipped with the live trade plugin out of the box.</p><h2 id="telegram" tabindex="-1">Telegram <a class="header-anchor" href="#telegram" aria-label="Permalink to &quot;Telegram&quot;">​</a></h2><p>To receive Telegram notifications you need:</p><ul><li>A Telegram bot</li><li>The ID of the Telegram account that wishes to receive notifications</li></ul><h3 id="creating-a-bot" tabindex="-1">Creating a bot <a class="header-anchor" href="#creating-a-bot" aria-label="Permalink to &quot;Creating a bot&quot;">​</a></h3><p>Open Telegram and search for <code>BotFather</code>. Follow the instructions by BotFather to create a new bot. It will ask for a name and a username for your bot. At last, it will generate your bot&#39;s access token for the HTTP API, which is a string like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">234325981:BBF5-H-FIdlfGVwXaSDfsAdy5A9_4uVsnH</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">234325981:BBF5-H-FIdlfGVwXaSDfsAdy5A9_4uVsnH</span></span></code></pre></div><p>Enter it in your project&#39;s <code>.env</code> file for either <code>GENERAL_TELEGRAM_BOT_TOKEN</code> or <code>ERROR_TELEGRAM_BOT_TOKEN</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>GENERAL_TELEGRAM_BOT_TOKEN</code> is used for all notifications while <code>ERROR_TELEGRAM_BOT_TOKEN</code> is used for error notifications only. It is sometimes useful to have a separate bot for urgent notifications so you can mute the general one as it can be sometimes too verbose.</p></div><p>Now search for the username of your bot in your contacts, select it, and click on the <code>/start</code>. This will permit the bot to send messages to your Telegram account.</p><h3 id="find-your-user-id" tabindex="-1">Find your user ID <a class="header-anchor" href="#find-your-user-id" aria-label="Permalink to &quot;Find your user ID&quot;">​</a></h3><p>Please notice that we&#39;re talking about your user ID and NOT your username. If you don&#39;t already know your Telegram account&#39;s user ID, open the <a href="https://telegram.me/getuseridbot" target="_blank" rel="noreferrer">getuserid</a> bot, press <code>/start</code> and it&#39;ll tell you your user ID. Enter it for the <code>GENERAL_TELEGRAM_BOT_CHAT_ID</code> value in your project&#39;s <code>.env</code> file.</p><h2 id="discord" tabindex="-1">Discord <a class="header-anchor" href="#discord" aria-label="Permalink to &quot;Discord&quot;">​</a></h2><p>Discord webhooks are easier to set up if you already have a Discord server. If you don&#39;t, you can create one; it&#39;s free.</p><p>First, create a new text channel in your discord server. Then click on the gear icon on the right side of the channel button. Then go to the <code>integrations</code> section. Click on the box which is titled &quot;Webhooks&quot;. Click on the blue &quot;New Webhook&quot; button, give it a name, and maybe a picture also. At last, click on the &quot;Copy Webhook URL&quot; button and paste that as the value for the <code>GENERAL_DISCORD_WEBHOOK</code> in your <code>.env</code> file.</p><h2 id="slack" tabindex="-1">Slack <a class="header-anchor" href="#slack" aria-label="Permalink to &quot;Slack&quot;">​</a></h2><p>Slack, similar to Discord also has webhooks. To set up you need to have a Slack workspace, it&#39;s free.</p><ul><li>First, create a channel, then you need to create an app at <a href="https://api.slack.com/apps?new_app=1" target="_blank" rel="noreferrer">this page</a>. Pick a name and choose your workspace and click <em>Create App</em>.</li><li>After creating you will be redirected to the app setting dashboard. Go to <em>Incoming webhooks</em> and click <em>Activate Incoming Webhooks</em> toggle to switch it on.</li><li>Now that Incoming Webhooks are enabled, the settings page should refresh and some extra options will appear. One of those options will be a really helpful button marked Add New Webhook to Workspace, and you should click it. Choose your channel and click <em>Authorize</em>.</li><li>You&#39;ll be sent back to your app settings, and you should now see a new entry under the Webhook URLs for Your Workspace section The last thing to do is put your webhook as a value to <code>GENERAL_SLACK_WEBHOOK</code> in your <code>.env</code> file.</li></ul><p>You can create another channel and another webhook for errors at the value of <code>ERROR_SLACK_WEBHOOK</code>.</p><p>Further information can be found <a href="https://api.slack.com/messaging/webhooks" target="_blank" rel="noreferrer">here</a>.</p><h2 id="sending-custom-notifications-from-within-the-strategy" tabindex="-1">Sending custom notifications from within the strategy <a class="header-anchor" href="#sending-custom-notifications-from-within-the-strategy" aria-label="Permalink to &quot;Sending custom notifications from within the strategy&quot;">​</a></h2><p>Sometimes you might want to send a custom notification based on some condition that is placed inside your strategy file. An example use-case of this might be to create some kind of alert using Jesse. And because you are writing in Python, you create all kinds of advanced alerts that other services can&#39;t provide. To do this, use the <a href="./strategies/api.html#log">self.log()</a> method.</p><h3 id="sending-custom-information-to-custom-channels" tabindex="-1">Sending custom information to custom channels <a class="header-anchor" href="#sending-custom-information-to-custom-channels" aria-label="Permalink to &quot;Sending custom information to custom channels&quot;">​</a></h3><p>You might want to go further with your notification and organize it to different channels in your Slack workspace or Discord server. To do so you can add to <a href="./strategies/api.html#log">self.log()</a> a webhook to what channel to use or an environment variable that is in <code>.env</code> with a webhook value.</p>',25),s=[n];function r(c,l,d,h,u,p){return o(),t("div",null,s)}const g=e(i,[["render",r]]);export{m as __pageData,g as default};
