import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.4719a631.js";const E=JSON.parse('{"title":"Utilities","description":"","frontmatter":{},"headers":[],"relativePath":"docs/utils.md","filePath":"docs/utils.md"}'),o={name:"docs/utils.md"},t=n(`<h1 id="utilities" tabindex="-1">Utilities <a class="header-anchor" href="#utilities" aria-label="Permalink to &quot;Utilities&quot;">​</a></h1><p><strong>Risk management</strong> and <strong>statistic</strong> calculations are essential for a successful algo trading career.</p><p>Hence, Jesse offers a collection of commonly used utility functions that life easier for quants.</p><h2 id="anchor-timeframe" tabindex="-1">anchor_timeframe <a class="header-anchor" href="#anchor-timeframe" aria-label="Permalink to &quot;anchor_timeframe&quot;">​</a></h2><p>Returns the anchor timeframe. Useful for writing dynamic strategies using multiple timeframes.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">anchor_timeframe(timeframe)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">anchor_timeframe(timeframe)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>timeframe: str</li></ul><p><strong>Return Type</strong>: str</p><p><strong>Example</strong>:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">bigger_timeframe </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> anchor_timeframe(</span><span style="color:#9ECBFF;">&#39;1h&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;"># prints &#39;4h&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bigger_timeframe </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> anchor_timeframe(</span><span style="color:#032F62;">&#39;1h&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># prints &#39;4h&#39;</span></span></code></pre></div><h2 id="are-cointegrated" tabindex="-1">are_cointegrated <a class="header-anchor" href="#are-cointegrated" aria-label="Permalink to &quot;are\\_cointegrated&quot;">​</a></h2><p>Uses unit-root test on residuals to test for a cointegrated relationship between two price return series.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Notice that for the formula to make sense <code>price_returns_1</code> and <code>price_returns_2</code> must be &quot;price returns&quot; and not the mere prices of the two assets. Hence you need to convert your asset prices to returns using the <a href="#prices-to-returns">prices_to_returns</a> utility.</p></div><p>The <code>cutoff</code> parameter points to the p-value threshold used in the formula.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">are_cointegrated(</span></span>
<span class="line"><span style="color:#E1E4E8;">    price_returns_1: np.ndarray, price_returns_2: np.ndarray, </span><span style="color:#FFAB70;">cutoff</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.05</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;font-style:italic;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bool</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">are_cointegrated(</span></span>
<span class="line"><span style="color:#24292E;">    price_returns_1: np.ndarray, price_returns_2: np.ndarray, </span><span style="color:#E36209;">cutoff</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.05</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#B31D28;font-style:italic;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bool</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>price_returns_1: np.ndarray</li><li>price_returns_1: np.ndarray</li><li>cutoff: float | default=0.05</li></ul><p><strong>Return Type</strong>: bool</p><h2 id="crossed" tabindex="-1">crossed <a class="header-anchor" href="#crossed" aria-label="Permalink to &quot;crossed&quot;">​</a></h2><p>Helper for the detection of crosses</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">crossed(series1, series2, </span><span style="color:#FFAB70;">direction</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sequential</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">crossed(series1, series2, </span><span style="color:#E36209;">direction</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sequential</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>series1: np.ndarray</li><li>series2: float, int, np.ndarray</li><li>direction: str - default: None - above or below</li></ul><p><strong>Return Type</strong>: bool | np.ndarray</p><h2 id="combinations-without-repeat" tabindex="-1">combinations_without_repeat <a class="header-anchor" href="#combinations-without-repeat" aria-label="Permalink to &quot;combinations_without_repeat&quot;">​</a></h2><p>Creates an array containing all combinations of the passed arrays individual values without repetitions. Useful for the optimization mode.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">combinations_without_repeat(a: np.ndarray, n: </span><span style="color:#FFAB70;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;font-style:italic;">-&gt;</span><span style="color:#E1E4E8;"> np.ndarray</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">combinations_without_repeat(a: np.ndarray, n: </span><span style="color:#E36209;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#B31D28;font-style:italic;">-&gt;</span><span style="color:#24292E;"> np.ndarray</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>a: np.ndarray</li><li>n: int - default: 2</li></ul><p><strong>Return Type</strong>: np.ndarray</p><h2 id="estimate-risk" tabindex="-1">estimate_risk <a class="header-anchor" href="#estimate-risk" aria-label="Permalink to &quot;estimate\\_risk&quot;">​</a></h2><p>Estimates the risk per share</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">estimate_risk(entry_price, stop_price)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">estimate_risk(entry_price, stop_price)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>entry_price: float</li><li>stop_price: float</li></ul><p><strong>Return Type</strong>: float</p><h2 id="kelly-criterion" tabindex="-1">kelly_criterion <a class="header-anchor" href="#kelly-criterion" aria-label="Permalink to &quot;kelly\\_criterion&quot;">​</a></h2><p>Returns the <a href="https://www.investopedia.com/articles/trading/04/091504.asp" target="_blank" rel="noreferrer">Kelly Criterion</a>.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">kelly_criterion(win_rate, ratio_avg_win_loss)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">kelly_criterion(win_rate, ratio_avg_win_loss)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>win_rate: float</li><li>ratio_avg_win_loss: float</li></ul><p><strong>Return Type</strong>: float</p><h2 id="limit-stop-loss" tabindex="-1">limit_stop_loss <a class="header-anchor" href="#limit-stop-loss" aria-label="Permalink to &quot;limit\\_stop\\_loss&quot;">​</a></h2><p>Limits the stop-loss price according to the max allowed risk percentage. (How many percent you&#39;re OK with the price going against your position)</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">limit_stop_loss(entry_price, stop_price, trade_type, max_allowed_risk_percentage)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">limit_stop_loss(entry_price, stop_price, trade_type, max_allowed_risk_percentage)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>entry_price: float</li><li>stop_price: float</li><li>trade_type: str</li><li>max_allowed_risk_percentage: float</li></ul><p><strong>Return Type</strong>: float</p><h2 id="numpy-candles-to-dataframe" tabindex="-1">numpy_candles_to_dataframe <a class="header-anchor" href="#numpy-candles-to-dataframe" aria-label="Permalink to &quot;numpy\\_candles\\_to\\_dataframe&quot;">​</a></h2><p>Helper to convert numpy to financial dataframe</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">numpy_candles_to_dataframe(candles: np.ndarray, </span><span style="color:#FFAB70;">name_date</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;date&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name_open</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;open&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name_high</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;high&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span><span style="color:#FFAB70;">name_low</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;low&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name_close</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name_volume</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;volume&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">numpy_candles_to_dataframe(candles: np.ndarray, </span><span style="color:#E36209;">name_date</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;date&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name_open</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;open&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name_high</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;high&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                               </span><span style="color:#E36209;">name_low</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;low&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name_close</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name_volume</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;volume&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>candles: np.ndarray</li><li>name_date: str</li><li>name_open: str</li><li>name_high: str</li><li>name_low: str</li><li>name_close: str</li><li>name_volume: str</li></ul><p><strong>Return Type</strong>: pd.DataFrame</p><h2 id="qty-to-size" tabindex="-1">qty_to_size <a class="header-anchor" href="#qty-to-size" aria-label="Permalink to &quot;qty\\_to\\_size&quot;">​</a></h2><p>Converts a quantity to its corresponding position-size. Example: Requesting 2 shares at the price of $50 would return $100.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">qty_to_size(qty, price)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">qty_to_size(qty, price)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>qty: float</li><li>price: float</li></ul><p><strong>Return Type</strong>: float</p><h2 id="risk-to-qty" tabindex="-1">risk_to_qty <a class="header-anchor" href="#risk-to-qty" aria-label="Permalink to &quot;risk\\_to\\_qty&quot;">​</a></h2><p>Calculates the quantity, based on the percentage of the capital you&#39;re willing to risk per trade.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is probably the most important helper function that you&#39;re going to need in your strategies. Those of you whom are familiar with compounding risk would love this function.</p><p>We made a <a href="https://positionsizingcalculator.netlify.app" target="_blank" rel="noreferrer">website</a> for you just to play with this simple but important formula.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>There might be situations where this helper returns a qty exceeding the available capital leading to an exception. The reason for this is a very close stop loss (often due to the usage of the ATR). You can check this with the calculator above. That&#39;s not a error, but expected behavior of the formula. You might want to add a logic limiting the qty to a maximum percentage of the capital.</p></div><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">risk_to_qty(capital, risk_per_capital, entry_price, stop_loss_price, </span><span style="color:#FFAB70;">precision</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fee_rate</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">risk_to_qty(capital, risk_per_capital, entry_price, stop_loss_price, </span><span style="color:#E36209;">precision</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fee_rate</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>capital: float</li><li>risk_per_capital: float</li><li>entry_price: float</li><li>stop_loss_price: float</li><li>precision: int - default: 3</li><li>fee_rate: float - default: 0</li></ul><p><strong>Return Type</strong>: float</p><p><strong>Example</strong>:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go_long</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># risk 1% of the capital($10000) for a trade entering at $100 with the stop-loss at $80</span></span>
<span class="line"><span style="color:#E1E4E8;">    risk_perc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">    stop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">150</span></span>
<span class="line"><span style="color:#E1E4E8;">    capital </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># or we could access capital dynamically:</span></span>
<span class="line"><span style="color:#E1E4E8;">    capital </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.balance</span></span>
<span class="line"><span style="color:#E1E4E8;">    qty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utils.risk_to_qty(capital, risk_perc, entry, stop)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.buy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, entry</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.stop_loss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, stop</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.take_profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, profit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go_long</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># risk 1% of the capital($10000) for a trade entering at $100 with the stop-loss at $80</span></span>
<span class="line"><span style="color:#24292E;">    risk_perc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    entry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">    stop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">150</span></span>
<span class="line"><span style="color:#24292E;">    capital </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># or we could access capital dynamically:</span></span>
<span class="line"><span style="color:#24292E;">    capital </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.balance</span></span>
<span class="line"><span style="color:#24292E;">    qty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> utils.risk_to_qty(capital, risk_perc, entry, stop)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.buy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, entry</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.stop_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, stop</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.take_profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, profit</span></span></code></pre></div><p>In real trading, you usually need to include the exchange fee in qty calculation to make sure you don&#39;t spend more than the existing capital (in which case Jesse would raise an error):</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># so instead of </span></span>
<span class="line"><span style="color:#E1E4E8;">qty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utils.risk_to_qty(capital, risk_perc, entry, stop)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># it&#39;s better to do</span></span>
<span class="line"><span style="color:#E1E4E8;">qty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utils.risk_to_qty(capital, risk_perc, entry, stop, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.fee_rate)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># so instead of </span></span>
<span class="line"><span style="color:#24292E;">qty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> utils.risk_to_qty(capital, risk_perc, entry, stop)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># it&#39;s better to do</span></span>
<span class="line"><span style="color:#24292E;">qty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> utils.risk_to_qty(capital, risk_perc, entry, stop, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.fee_rate)</span></span></code></pre></div><p><strong>See Also</strong>: <a href="/docs/strategies/api.html#fee-rate">fee_rate</a></p><h2 id="risk-to-size" tabindex="-1">risk_to_size <a class="header-anchor" href="#risk-to-size" aria-label="Permalink to &quot;risk\\_to\\_size&quot;">​</a></h2><p>Calculates the size of the position based on the amount of risk percentage you&#39;re willing to take.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">risk_to_size(capital_size, risk_percentage, risk_per_qty, entry_price)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">risk_to_size(capital_size, risk_percentage, risk_per_qty, entry_price)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>capital_size: float</li><li>risk_percentage: float</li><li>risk_per_qty: float</li><li>entry_price: float</li></ul><p><strong>Return Type</strong>: float</p><h2 id="signal-line" tabindex="-1">signal_line <a class="header-anchor" href="#signal-line" aria-label="Permalink to &quot;signal\\_line&quot;">​</a></h2><p>Returns the moving average of the series. Useful to create so called signal lines of indicators.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">signal_line(series, </span><span style="color:#FFAB70;">period</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">matype</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">signal_line(series, </span><span style="color:#E36209;">period</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#E36209;">matype</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>series: np.array</li><li>period: int - default = 10</li><li>matype: int - default = 0</li></ul><p><strong>See <a href="https://docs.jesse.trade/docs/indicators/reference.html#indicators-reference" target="_blank" rel="noreferrer">here</a> for available matypes</strong></p><p><strong>Return Type</strong>: np.array</p><h2 id="size-to-qty" tabindex="-1">size_to_qty <a class="header-anchor" href="#size-to-qty" aria-label="Permalink to &quot;size\\_to\\_qty&quot;">​</a></h2><p>Converts a position-size to the corresponding quantity. Example: Requesting $100 at the price of $50 would return 2.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">size_to_qty(position_size, price, </span><span style="color:#FFAB70;">precision</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fee_rate</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">size_to_qty(position_size, price, </span><span style="color:#E36209;">precision</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fee_rate</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>price: float</li><li>position_size: float</li><li>precision: int - default: 3</li><li>fee_rate: float - default: 0</li></ul><p><strong>Return Type</strong>: float</p><h2 id="streaks" tabindex="-1">streaks <a class="header-anchor" href="#streaks" aria-label="Permalink to &quot;streaks&quot;">​</a></h2><p>Returns the streaks of the series. A positive number stands for a positive streak and a negativ number for a negative streak. By default it uses the first discrete difference.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">streaks(series: np.array, </span><span style="color:#FFAB70;">use_diff</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;font-style:italic;">-&gt;</span><span style="color:#E1E4E8;"> np.array</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">streaks(series: np.array, </span><span style="color:#E36209;">use_diff</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span><span style="color:#B31D28;font-style:italic;">-&gt;</span><span style="color:#24292E;"> np.array</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>series: np.array</li><li>use_diff: bool</li></ul><p><strong>Return Type</strong>: np.array[bool]</p><h2 id="strictly-decreasing" tabindex="-1">strictly_decreasing <a class="header-anchor" href="#strictly-decreasing" aria-label="Permalink to &quot;strictly\\_decreasing&quot;">​</a></h2><p>Returns whether a series in strictly decreasing or not.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">strictly_increasing(series, lookback)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">strictly_increasing(series, lookback)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>series: np.array</li><li>lookback: int</li></ul><p><strong>Return Type</strong>: bool</p><h2 id="strictly-increasing" tabindex="-1">strictly_increasing <a class="header-anchor" href="#strictly-increasing" aria-label="Permalink to &quot;strictly\\_increasing&quot;">​</a></h2><p>Returns whether a series in strictly increasing or not.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">strictly_increasing(series, lookback)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">strictly_increasing(series, lookback)</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>series: np.array</li><li>lookback: int</li></ul><p><strong>Return Type</strong>: bool</p><h2 id="subtract-floats" tabindex="-1">subtract_floats <a class="header-anchor" href="#subtract-floats" aria-label="Permalink to &quot;subtract\\_floats&quot;">​</a></h2><p>Subtracts two floats without the rounding issue in Python</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">subtract_floats(float1: </span><span style="color:#79B8FF;">float</span><span style="color:#E1E4E8;">, float2: </span><span style="color:#79B8FF;">float</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;font-style:italic;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">float</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">subtract_floats(float1: </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">, float2: </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">) </span><span style="color:#B31D28;font-style:italic;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>float1: float</li><li>float2: float</li></ul><p><strong>Return Type</strong>: float</p><h2 id="sum-floats" tabindex="-1">sum_floats <a class="header-anchor" href="#sum-floats" aria-label="Permalink to &quot;sum\\_floats&quot;">​</a></h2><p>Sums two floats without the rounding issue in Python</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sum_floats(float1: </span><span style="color:#79B8FF;">float</span><span style="color:#E1E4E8;">, float2: </span><span style="color:#79B8FF;">float</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;font-style:italic;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">float</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sum_floats(float1: </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">, float2: </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">) </span><span style="color:#B31D28;font-style:italic;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>float1: float</li><li>float2: float</li></ul><p><strong>Return Type</strong>: float</p><h2 id="prices-to-returns" tabindex="-1">prices_to_returns <a class="header-anchor" href="#prices-to-returns" aria-label="Permalink to &quot;prices\\_to\\_returns&quot;">​</a></h2><p>Converts a series of asset prices to returns.</p><p>In case you&#39;re wondering why you need to use price returns for price series analysis instead of the price values, check out this answer on <a href="https://quant.stackexchange.com/a/16484" target="_blank" rel="noreferrer">Quant Stackexchange</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Notice that the first return value for the first index cannot be calculated hence it equals <code>nan</code>.</p></div><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">prices_to_returns(price_series: np.ndarray) </span><span style="color:#FDAEB7;font-style:italic;">-&gt;</span><span style="color:#E1E4E8;"> np.ndarray</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">prices_to_returns(price_series: np.ndarray) </span><span style="color:#B31D28;font-style:italic;">-&gt;</span><span style="color:#24292E;"> np.ndarray</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>price_series: np.ndarray</li></ul><p><strong>Return Type</strong>: np.ndarray</p><h2 id="wavelet-denoising" tabindex="-1">wavelet_denoising <a class="header-anchor" href="#wavelet-denoising" aria-label="Permalink to &quot;wavelet\\_denoising&quot;">​</a></h2><p>Denoises / filters timeseries data. First deconstructs and then reconstructs based on a threshold.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Based on <a href="https://pywavelets.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">PyWavelets</a>. See its docs for more information. It&#39;s recommended to consider only <code>haar</code>, <code>db</code>, <code>sym</code>, <code>coif</code> wavelet basis functions, as these are relatively suitable for financial data.</p></div><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wavelet_denoising(raw: np.ndarray, wavelet: </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;haar&#39;</span><span style="color:#E1E4E8;">, level: </span><span style="color:#FFAB70;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, mode: </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;symmetric&#39;</span><span style="color:#E1E4E8;">, smoothing_factor: </span><span style="color:#FFAB70;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, threshold_mode: </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hard&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;font-style:italic;">-&gt;</span><span style="color:#E1E4E8;"> np.ndarray</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wavelet_denoising(raw: np.ndarray, wavelet: </span><span style="color:#E36209;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;haar&#39;</span><span style="color:#24292E;">, level: </span><span style="color:#E36209;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, mode: </span><span style="color:#E36209;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;symmetric&#39;</span><span style="color:#24292E;">, smoothing_factor: </span><span style="color:#E36209;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, threshold_mode: </span><span style="color:#E36209;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hard&#39;</span><span style="color:#24292E;">) </span><span style="color:#B31D28;font-style:italic;">-&gt;</span><span style="color:#24292E;"> np.ndarray</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>raw: np.ndarray</li><li><a href="https://pywavelets.readthedocs.io/en/latest/ref/wavelets.html#built-in-wavelets-wavelist" target="_blank" rel="noreferrer">wavelet</a>: str</li><li>level: int</li><li><a href="https://pywavelets.readthedocs.io/en/latest/ref/signal-extension-modes.html#ref-modes" target="_blank" rel="noreferrer">mode</a>: str</li><li>smoothing_factor: float</li><li><a href="https://pywavelets.readthedocs.io/en/latest/ref/thresholding-functions.html?highlight=mode#thresholding" target="_blank" rel="noreferrer">threshold_mode</a>: str</li></ul><p><strong>Return Type</strong>: np.ndarray</p><h2 id="z-score" tabindex="-1">z_score <a class="header-anchor" href="#z-score" aria-label="Permalink to &quot;z\\_score&quot;">​</a></h2><p>A Z-score is a numerical measurement that describes how many standard deviations far away the data is comparing to the mean of the data.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Notice that for the formula to make sense <code>price_returns</code> must be &quot;price returns&quot; and not the mere prices of the two assets. Hence you need to convert your asset prices to returns using the <a href="#prices-to-returns">prices_to_returns</a> utility.</p></div><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">z_score(price_returns: np.ndarray) </span><span style="color:#FDAEB7;font-style:italic;">-&gt;</span><span style="color:#E1E4E8;"> np.ndarray</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">z_score(price_returns: np.ndarray) </span><span style="color:#B31D28;font-style:italic;">-&gt;</span><span style="color:#24292E;"> np.ndarray</span></span></code></pre></div><p><strong>Properties</strong>:</p><ul><li>price_returns: np.ndarray</li></ul><p><strong>Return Type</strong>: np.ndarray</p>`,145),l=[t];function p(r,i,c,y,d,u){return a(),e("div",null,l)}const g=s(o,[["render",p]]);export{E as __pageData,g as default};
