import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.4719a631.js";const E=JSON.parse('{"title":"Indicators","description":"","frontmatter":{},"headers":[],"relativePath":"docs/indicators/index.md","filePath":"docs/indicators/index.md"}'),o={name:"docs/indicators/index.md"},l=n(`<h1 id="indicators" tabindex="-1">Indicators <a class="header-anchor" href="#indicators" aria-label="Permalink to &quot;Indicators&quot;">​</a></h1><p><strong>Jesse offers the simplest to use, and the most number of technical indicators among all trading systems</strong>. Few of which are custom-made, and the rest are using the <a href="http://ta-lib.org" target="_blank" rel="noreferrer">ta-lib</a> or <a href="https://tulipindicators.org/" target="_blank" rel="noreferrer">tulip</a> libraries which are open source and well-known.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You might stumble upon differences to other tools caused by the use of different indicator equations or memory. <a href="https://jesse.trade/help/faq/i-changed-the-warm-up-candles-config-why-do-my-indicator-values-change" target="_blank" rel="noreferrer">See here</a> to learn more about memory of indicators. If you use a very big period you should increase the warm-up-candle amount to have enough candles and to account for the memory. You can always use other libraries directly of course, there might be speed differences though. See here for an <a href="https://docs.jesse.trade/docs/indicators/custom-indicators.html#external-libraries-for-technical-indicators-and-things-to-be-aware-of" target="_blank" rel="noreferrer">explaination</a>.</p></div><p>The API has been designed to be the simplest yet flexible enough for all types of needs from developing strategies to doing research in <a href="/docs/research/jupyter">Jupyter Notebooks</a>.</p><h2 id="import" tabindex="-1">Import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;Import&quot;">​</a></h2><p>To get started make sure the <code>indicators</code> module is imported:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jesse.indicators </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> ta</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jesse.indicators </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> ta</span></span></code></pre></div><h2 id="example-1" tabindex="-1">Example 1 <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1&quot;">​</a></h2><p>The first parameter of all indicators is <code>candles</code> with the type of a Numpy array.</p><p>When developing strategies, usually all you care about is the indicator&#39;s value for the current candle. To get just that, simply pass <code>self.candles</code>:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># give me SMA with period=8 for current candle:</span></span>
<span class="line"><span style="color:#E1E4E8;">ta.sma(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.candles, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># give me SMA with period=8 for current candle:</span></span>
<span class="line"><span style="color:#24292E;">ta.sma(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.candles, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="example-2" tabindex="-1">Example 2 <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2&quot;">​</a></h2><p>To get indicator values for candles other than your trading <a href="/docs/routes">route</a> (in case you have defined more than one route in your <code>routes.py</code> file), use <code>self.get_candles()</code> method:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ta.sma(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.get_candles(</span><span style="color:#9ECBFF;">&#39;Binance&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;BTC-USDT&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;4h&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ta.sma(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.get_candles(</span><span style="color:#032F62;">&#39;Binance&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;BTC-USDT&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;4h&#39;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="named-tuples" tabindex="-1">Named Tuples <a class="header-anchor" href="#named-tuples" aria-label="Permalink to &quot;Named Tuples&quot;">​</a></h2><p>The return type of all indicators returning multiple values is a <code>namedtuple</code> Python object. In case you&#39;re not familiar with the concept of <code>namedtuple</code> in Python, it&#39;s just like a regular tuple but you can also use it as a class object.</p><p>For example here are two ways you could use the Bollinger Bands indicator, which as you know, returns three values: <code>upperband</code>, <code>middleband</code>, <code>lowerband</code></p><ol><li>Use it as a normal tuple:</li></ol><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># as three variables</span></span>
<span class="line"><span style="color:#E1E4E8;">upperband, middleband, lowerband </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bollinger_bands(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.candles, </span><span style="color:#FFAB70;">period</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># or you could fetch it as one tuple and retrieve values as you would from a tuple:</span></span>
<span class="line"><span style="color:#E1E4E8;">bb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bollinger_bands(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.candles, </span><span style="color:#FFAB70;">period</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">bb[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;"># upperband</span></span>
<span class="line"><span style="color:#E1E4E8;">bb[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;"># middleband</span></span>
<span class="line"><span style="color:#E1E4E8;">bb[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;"># lowerband</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># as three variables</span></span>
<span class="line"><span style="color:#24292E;">upperband, middleband, lowerband </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bollinger_bands(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.candles, </span><span style="color:#E36209;">period</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># or you could fetch it as one tuple and retrieve values as you would from a tuple:</span></span>
<span class="line"><span style="color:#24292E;">bb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bollinger_bands(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.candles, </span><span style="color:#E36209;">period</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">bb[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#6A737D;"># upperband</span></span>
<span class="line"><span style="color:#24292E;">bb[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#6A737D;"># middleband</span></span>
<span class="line"><span style="color:#24292E;">bb[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#6A737D;"># lowerband</span></span></code></pre></div><ol start="2"><li>The second way it to use it as a class instance:</li></ol><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">bb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bollinger_bands(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.candles, </span><span style="color:#FFAB70;">period</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">bb.upperband</span></span>
<span class="line"><span style="color:#E1E4E8;">bb.middleband</span></span>
<span class="line"><span style="color:#E1E4E8;">bb.lowerband</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bollinger_bands(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.candles, </span><span style="color:#E36209;">period</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">bb.upperband</span></span>
<span class="line"><span style="color:#24292E;">bb.middleband</span></span>
<span class="line"><span style="color:#24292E;">bb.lowerband</span></span></code></pre></div>`,21),p=[l];function t(r,c,i,d,y,h){return a(),e("div",null,p)}const b=s(o,[["render",t]]);export{E as __pageData,b as default};
