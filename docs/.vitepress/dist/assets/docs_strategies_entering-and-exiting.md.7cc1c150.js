import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.4719a631.js";const u=JSON.parse('{"title":"Entering and exiting trades","description":"","frontmatter":{},"headers":[],"relativePath":"docs/strategies/entering-and-exiting.md","filePath":"docs/strategies/entering-and-exiting.md"}'),o={name:"docs/strategies/entering-and-exiting.md"},e=l(`<h1 id="entering-and-exiting-trades" tabindex="-1">Entering and exiting trades <a class="header-anchor" href="#entering-and-exiting-trades" aria-label="Permalink to &quot;Entering and exiting trades&quot;">â€‹</a></h1><div class="tip custom-block"><p class="custom-block-title">ðŸŽ¥ Video Tutorial</p><p>In case you prefer watching a video, here&#39;s a <a href="https://youtu.be/BwZ6GYbUYkc" target="_blank" rel="noreferrer">short screencast explaining &quot;How to enter and exit trades&quot;</a>.</p></div><p>Deciding to enter a trade is nothing but a True or False decision.</p><p>Jesse uses <code>should_long()</code> and <code>should_short()</code> methods which must return a boolean at all times.</p><p>After making up your mind about entering a trade, you need to come up with exact entry prices, and exit prices. Jesse uses <code>go_long()</code> and <code>go_short()</code> methods for that.</p><h2 id="should-long" tabindex="-1">should_long() <a class="header-anchor" href="#should-long" aria-label="Permalink to &quot;should_long()&quot;">â€‹</a></h2><p><strong>Return Type</strong>: bool</p><p>Assuming the position is currently close, should it open a long position.</p><p>Example:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">should_long</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># return true if current candle is a bullish candle</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.close </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.open:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">should_long</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># return true if current candle is a bullish candle</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.close </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.open:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span></code></pre></div><h2 id="should-short" tabindex="-1">should_short() <a class="header-anchor" href="#should-short" aria-label="Permalink to &quot;should_short()&quot;">â€‹</a></h2><p><strong>Return Type</strong>: bool</p><p>Assuming the position is currently close, should it open a short position.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">should_short</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># return true if current candle is a bearish candle</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.close </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.open:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">should_short</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># return true if current candle is a bearish candle</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.close </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.open:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Obviously, you cannot enter both a short and long position at the same time. Hence, <code>should_long()</code> and <code>should_short()</code> cannot return True at the same.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>should_long()</code> and <code>should_short()</code> are for entering trades only. This means that they would get called on every new candle only if no position is open, and no order is active.</p><p>If you&#39;re looking to close trades dynamically, <a href="/docs/strategies/entering-and-exiting.html#update-position">update_position()</a> is what you&#39;re looking for.</p></div><h2 id="go-long" tabindex="-1">go_long() <a class="header-anchor" href="#go-long" aria-label="Permalink to &quot;go_long()&quot;">â€‹</a></h2><p>Inside the <code>go_long()</code> method you set your buy price (entry point), quantity (how much to buy), the stop-loss and take-profit (exit points) quantity, and prices. The basic syntax is:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go_long</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.buy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, entry_price</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.stop_loss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, stop_loss_price</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.take_profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, take_profit_price</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go_long</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.buy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, entry_price</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.stop_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, stop_loss_price</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.take_profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, take_profit_price</span></span></code></pre></div><p><code>qty</code>, <code>entry_price</code>, <code>stop_loss_price</code>, and <code>take_profit_price</code> are placeholders, and can be anything you want; but <code>self.buy</code>, <code>self.stop_loss</code>, and <code>self.take_profit</code> are special variables that Jesse uses; they must be the same.</p><p>A working example would be:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go_long</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    qty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.buy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.price</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.stop_loss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.low </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.take_profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.high </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go_long</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    qty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.buy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.price</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.stop_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.low </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.take_profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.high </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Smart ordering system</p><p>Notice that we did not have to define which order type to use. Jesse is smart enough to decide the type of the orders by itself.</p><p>For example, if it is for a long position, here&#39;s how Jesse decides:</p><ul><li>MARKET order: if <code>entry_price == current_price</code></li><li>LIMIT order: if <code>entry_price &lt; current_price</code></li><li>STOP order: if <code>entry_price &gt; current_price</code></li></ul></div><h2 id="go-short" tabindex="-1">go_short() <a class="header-anchor" href="#go-short" aria-label="Permalink to &quot;go_short()&quot;">â€‹</a></h2><p>Same as <a href="#go-long">go_long()</a> but uses <code>self.sell</code> for entry instead of <code>self.buy</code>:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go_short</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.sell </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, entry_price</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.stop_loss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, stop_loss_price</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.take_profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, take_profit_price</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go_short</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.sell </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, entry_price</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.stop_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, stop_loss_price</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.take_profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, take_profit_price</span></span></code></pre></div><p>A working example would be:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go_short</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    qty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># opens position with a MARKET order</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.sell </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.price</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.stop_loss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.high </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.take_profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.low </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go_short</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    qty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># opens position with a MARKET order</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.sell </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.price</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.stop_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.high </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.take_profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.low </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span></code></pre></div><h2 id="should-cancel-entry" tabindex="-1">should_cancel_entry() <a class="header-anchor" href="#should-cancel-entry" aria-label="Permalink to &quot;should_cancel_entry()&quot;">â€‹</a></h2><p><strong>Return Type</strong>: bool</p><p>What this method is asking you is: Assuming an open position order has already been submitted but <strong>not executed yet</strong>, should it be canceled?</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>After submitting orders for opening new positions either you&#39;ll enter a position immediately with a market order, or have to wait until your limit/stop order gets filled. This method is used for the second scenario.</p></div><p>A good example would be for a trade we&#39;re trying to open a position when the price continues the uptrend:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">should_long</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go_long</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    qty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.high </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.buy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, entry</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">should_long</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go_long</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    qty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    entry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.high </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.buy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, entry</span></span></code></pre></div><p>Since the entry price is above the current price, Jesse will submit a stop order for entering this trade. If the price indeed rises we&#39;ll be fine, but what if a new candle is passed, and the price goes down? Then we would want the previous order to be canceled and a new order submitted based on the high price of the new candle.</p><p>To do this, we&#39;ll have to define the <code>should_cancel_entry()</code> as:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">should_cancel_entry</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">should_cancel_entry</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span></code></pre></div><p>In your strategy, you may need to do some checking before deciding whether or not the previous open-position order is still valid or has to be canceled.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>should_cancel_entry()</code> only decides whether or not to cancel the entry order. It does not affect your exit (take-profit and stop-loss) orders.</p></div><h2 id="entering-and-or-exiting-at-multiple-points" tabindex="-1">Entering and/or exiting at multiple points <a class="header-anchor" href="#entering-and-or-exiting-at-multiple-points" aria-label="Permalink to &quot;Entering and/or exiting at multiple points&quot;">â€‹</a></h2><p>So far we defined enter-once and exit-once strategy examples using only <code>go_long()</code> and <code>go_short()</code> methods. This may not be enough for your strategies.</p><p>For entering/exiting at one point we defined <strong>single tuples</strong>. To enter/exit at multiple points all you need to do is to use a <strong>list of tuples</strong> instead.</p><p>Example of taking profit at two points:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go_long</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    qty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.buy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.stop_loss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">80</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># take-profit at two points</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.take_profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        (qty</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">120</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        (qty</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">140</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go_long</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    qty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.buy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.stop_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">80</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># take-profit at two points</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.take_profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        (qty</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">120</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        (qty</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">140</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span></code></pre></div><p>We could do the same for <code>self.stop_loss</code> if it makes sense in your strategy.</p><p>Example of entering the trade at two points:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go_long</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    qty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># open position at $120 and increase it at $140</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.buy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        (qty</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">120</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        (qty</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">140</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.stop_loss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.take_profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">160</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go_long</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    qty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># open position at $120 and increase it at $140</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.buy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        (qty</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">120</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        (qty</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">140</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.stop_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.take_profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">160</span></span></code></pre></div><p>What if we&#39;re not aware of our exact exit point at the time of entering the trade? For instance, it is a common case in trend-following strategies to exit when the trend has stopped.</p><p>The next section introduces the concept of <a href="./events.html">events</a> to fulfill this need.</p><h2 id="before" tabindex="-1">before() <a class="header-anchor" href="#before" aria-label="Permalink to &quot;before()&quot;">â€‹</a></h2><p>As explained in the <a href="./">flowchart</a>, this is the first method that gets called when a new candle is received. It is used for updating <code>self.vars</code> (custom variables) or any other action you might have in mind that needs to be done before your strategy gets executed.</p><p><strong>See also</strong>: <a href="./api.html#vars">vars</a>, <a href="./api.html#after">after</a></p><h2 id="after" tabindex="-1">after() <a class="header-anchor" href="#after" aria-label="Permalink to &quot;after()&quot;">â€‹</a></h2><p>As explained in the <a href="./">flowchart</a>, this is the last method that gets called when a new candle is received and the strategy is getting executed. It is used for updating <code>self.vars</code> (custom variables) or any other action you might have in mind that needs to be done after your strategy gets executed.</p><p><strong>See also</strong>: <a href="./api.html#vars">vars</a>, <a href="./api.html#before">before</a></p><h2 id="update-position" tabindex="-1">update_position() <a class="header-anchor" href="#update-position" aria-label="Permalink to &quot;update_position()&quot;">â€‹</a></h2><p>Assuming there&#39;s an open position, this method is used to update exit points or to add to the size of the position if needed.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If your strategy exits dynamically (for example if at the time of entering the trade you don&#39;t know the take-profit price) then you definitely need to use <code>update_position()</code>.</p></div><p><strong>Example #1:</strong> Exiting the trade by implementing a trailing stop for take-profit:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update_position</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    qty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.position.qty </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># set stop-loss price $10 away from the high/low of the current candle</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.is_long:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.take_profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.high </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.take_profit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qty, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.low </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update_position</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    qty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.position.qty </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># set stop-loss price $10 away from the high/low of the current candle</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.is_long:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.take_profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.high </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.take_profit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qty, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.low </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span></code></pre></div><p><strong>Example #2:</strong> Liquidating the open position at a certain condition. In this case, we <a href="/docs/strategies/api.html#liquidate">liquidate</a> if we&#39;re in a long trade and the RSI reaches 100:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update_position</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.is_long </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> ta.rsi(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.candles) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.liquidate()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update_position</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.is_long </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> ta.rsi(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.candles) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.liquidate()</span></span></code></pre></div><p><strong>Example #3:</strong> Double the size of my long position if the RSI shows oversold and I&#39;m sitting at more than 5% profit:</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update_position</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.is_long:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.position.pnl_percentage </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> ta.rsi(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.candles) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># double the size of the already open position at current price (with a MARKET order)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.buy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.position.qty, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.price</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update_position</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.is_long:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.position.pnl_percentage </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> ta.rsi(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.candles) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># double the size of the already open position at current price (with a MARKET order)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.buy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.position.qty, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.price</span></span></code></pre></div><h2 id="init" tabindex="-1">__init__() <a class="header-anchor" href="#init" aria-label="Permalink to &quot;\\_\\_init\\_\\_()&quot;">â€‹</a></h2><p>The <code>__init__</code> is not a new concept. It&#39;s the constructor of a Python class. Jesse strategies are Python classes, hence you may use the <code>__init__</code> method for actions that need to be performed at the beginning of a strategy and only once.</p><p>You could say <code>__init__</code> is the opposite of the <a href="./entering-and-exiting.html#terminate">terminate()</a> method in a Jesse strategy.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>Remember to begin <code>__init__</code> method&#39;s content with a <code>super().__init__()</code> call, otherwise you will get an error.</p></div><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;initiated the strategy class&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;initiated the strategy class&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="before-terminate" tabindex="-1">before_terminate() <a class="header-anchor" href="#before-terminate" aria-label="Permalink to &quot;before_terminate()&quot;">â€‹</a></h2><p>The last function called right before <a href="#terminate">terminate()</a>. The difference between <code>before_terminate()</code> and <code>terminate()</code> is that in <code>before_terminate()</code> you are able to submit orders, in other words, make modifications to your position. For example, maybe before terminating a live session, you want to cut your position&#39;s size in half; or close it.</p><p>But in <a href="#terminate">terminate()</a> you can&#39;t submit orders. You can use it for logging info, saving data to a file, etc.</p><h2 id="terminate" tabindex="-1">terminate() <a class="header-anchor" href="#terminate" aria-label="Permalink to &quot;terminate()&quot;">â€‹</a></h2><p>There are cases where you need to tell Jesse to perform a task right before terminating. Examples of such a task would be to log a value or save a machine learning model.</p><p>You could say <code>terminate</code> is the opposite of the <a href="./entering-and-exiting.html#init">__init__</a> method in a Jesse strategy.</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">terminate</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.log(</span><span style="color:#9ECBFF;">&#39;About to terminate execution...&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">terminate</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.log(</span><span style="color:#032F62;">&#39;About to terminate execution...&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div>`,76),p=[e];function t(c,r,i,y,E,d){return n(),a("div",null,p)}const f=s(o,[["render",t]]);export{u as __pageData,f as default};
